/**************************************
 author:WangHaiLong
 company:Suntec
 email:Wanhailong1118@gmail.com
 version:1.0.0 
 Function:This is the program C rule

**************************************/



/***************************************
The point variable compare with the zero
***************************************/

/***************************************
Example
***************************************/

int *p = NULL;

if(NULL != p)
{
	/*do something*/
}


/***************************************
The Coding Style
***************************************/

/***************************************
Example
***************************************/
void function()
{
	/*do something*/
}

if(condition) {
	/*do something*/
}
else {
	/*do something*/
}

for(XX;XX;XX) {
	/*do something*/
}

while(condition) {
    /*do something*/
}

do {
    /*do something*/
}while(condition)

/***************************************
循环语句的注意点
***************************************/

/***************************************
注释的基本要求
***************************************/

【规则 1】注释应当准确、易懂，防止有二义性。错误的注释不但无益反而有害。
【规则 2】边写代码边注释，修改代码同时修改相应的注释，以保证注释与代码的一致性。
		 不再有用的注释要及时删除。
【规则 3】注释是对代码的“提示”，而不是文档。程序中的注释应当简单明了，注释太
	     多了会让人眼花缭乱。
【规则 4】一目了然的语句不加注释。
	     例如：i++; /* i 加1 */
		 多余的注释
【规则 5】对于全局数据（全局变量、常量定义等）必须要加注释。
【规则 6】注释采用英文，尽量避免在注释中使用缩写，特别是不常用缩写。
	     因为不一定所有的编译器都能显示中文，别人打开你的代码，你的注释也许是一团乱
		 码。还有，你的代码不一定是懂中文的人阅读。
【规则7】注释的位置应与被描述的代码相邻，可以与语句在同一行，也可以在上行，但
		不可放在下方。同一结构中不同域的注释要对齐。
【规则 8】当代码比较长，特别是有多重嵌套时，应当在一些段落的结束处加注释，便于阅读。
【规则 9】注释的缩进要与代码的缩进一致。
【规则 10】注释代码段时应注重“为何做（why）”，而不是“怎么做（how）”。
	      说明怎么做的注释一般停留在编程语言的层次，而不是为了说明问题。尽力阐述“怎么做”
		  的注释一般没有告诉我们操作的意图，而指明“怎么做”的注释通常是冗余的。
【规则 11】数值的单位一定要注释。
	      注释应该说明某数值的单位到底是什么意思。比如：关于长度的必须说明单位是毫米，
		  米，还是千米等；关于时间的必须说明单位是时，分，秒，还是毫秒等。
【规则 12】对变量的范围给出注释。
【规则 13】对一系列的数字编号给出注释，尤其在编写底层驱动程序的时候（比如管脚编号）。
【规则 13】对于函数的入口出口数据给出注释。
